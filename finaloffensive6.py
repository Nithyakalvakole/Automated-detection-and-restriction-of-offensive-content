# -*- coding: utf-8 -*-
"""finaloffensive.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pgBnUO_GXoO9rSz0TTPawrMgOLqo_k2E
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
import re
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

df = pd.read_csv('/content/Offensive content (kaggle).csv')

def preprocess_text(text):
    text = re.sub(r"http\S+", "", text)  # Remove URLs
    text = re.sub(r"[^a-zA-Z\s]", "", text)  # Remove special characters and numbers
    text = text.lower()  # Convert to lowercase
    text = text.strip()  # Remove leading and trailing spaces
    return text

df['cleaned_tweet'] = df['tweet'].apply(preprocess_text)

df.head(10)

X_train, X_test, y_train, y_test = train_test_split(df['cleaned_tweet'], df['class'], test_size=0.2, random_state=42)

# Feature Extraction: Convert text to TF-IDF features
vectorizer = TfidfVectorizer(max_features=5000, stop_words='english')
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Model Training: Train a SVM model

model =  SVC(kernel='linear', C=1.0, random_state=42)
model.fit(X_train_tfidf, y_train)

# Model Evaluation
y_pred = model.predict(X_test_tfidf)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

# Plot Confusion Matrix
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Non-Offensive', 'Offensive'],
            yticklabels=['Non-Offensive', 'Offensive'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Function to detect offensive content
def detect_offensive_content(text):
    text_tfidf = vectorizer.transform([text])
    prediction = model.predict(text_tfidf)
    return "Offensive" if prediction[0] == 1 else "Non-Offensive"

# Example usage
#sample_text = input("Enter your comment:")
#result = detect_offensive_content(sample_text)
#print(f"Text: '{sample_text}' is classified as:\n {result}")

flag='Non-offensive'
c=0
while True:

    user_tweet = input("\nEnter a tweet to classify (or type 'exit' to stop): ")
    if user_tweet.lower() == 'exit':
        break
    flag=detect_offensive_content(user_tweet)
    if flag=='Offensive':
      c=c+1
      print(detect_offensive_content(user_tweet))
      print('Warning...!')
      if(c>=3):
         print("Blocked....!")
         break

    else:
       print(detect_offensive_content(user_tweet))